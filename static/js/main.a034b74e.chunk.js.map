{"version":3,"sources":["PartnerForm.js","Utils.js","GitHubController.js","PartnerPage.js","LoginPage.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["FORM_FIELDS","name","type","label","error","background","steps","LOGO","SCREEN_IMAGE","SCREEN_WIDE_IMAGE","DATA","PartnerForm","props","state","fields","step","data","logoDataURL","logoFile","screenImageDataURL","screenImageFile","screenWideImageDataURL","screenWideImageFile","handleSubmit","bind","logoFileDropped","screenImageFileDropped","screenWideImageFileDropped","console","log","JSON","stringify","this","event","preventDefault","hasErrors","alert","formData","FormData","target","object","forEach","value","key","files","logo","screenImage","screenWideImage","onSubmit","file","reader","FileReader","onload","e","currentStep","setState","result","readAsDataURL","field","colorString","startsWith","length","isValid","test","isValidColorString","setFieldBackgroundColor","setFieldErrorState","Object","assign","strippedValue","replace","toLowerCase","id","code","Math","floor","random","backgroundColor","callback","map","f","isError","completeView","accept","multiple","onDropAccepted","onDropRejected","onDropInvalidFile","getRootProps","getInputProps","className","src","index","style","Fragment","onChange","fieldChangeCallback","slice","Component","Utils","Promise","resolve","reject","encoded","toString","repeat","onerror","GitHubController","owner","repo","github","fromBranchName","git","getRef","ref","then","a","async","masterSha","sha","treeObjects","createBlob","content","encoding","blob","push","path","mode","createTree","base_tree","tree","parentSha","treeSha","jsonFile","baseTree","treeResult","commitMessage","createCommit","message","parents","commitResult","branchName","createRef","title","body","pulls","create","head","base","PartnerPage","gitHubController","utils","partners","loading","fetch","response","text","stringResponse","parse","atob","getJsonPartners","validateOrAbort","window","scrollTo","logoImageName","screenImageName","screenWideImageName","readFileAsBas64String","createImageFileTrees","commitFromTree","logo_url","screen_image_url","screen_wide_image_url","changed","newArray","partner","btoa","createJsonFileTree","branchFromCommit","prTitle","prBody","pullRequestFromBranch","tint_color","contrast_tint_color","primary_color","alt","LoginPage","dataObj","Octokit","auth","access_token","userAgent","onLogin","href","rel","MainPage","handleLogin","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a034b74e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\n\nconst FORM_FIELDS = [\n    {\n        name: \"name\",\n        type: \"text\",\n        label: \"Partner Name\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"code\",\n        type: \"text\",\n        label: \"Partner ID (unlock code)\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"tint_color\",\n        type: \"color\",\n        label: \"Tint Color\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"contrast_tint_color\",\n        type: \"color\",\n        label: \"Contrast Tint Color\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"primary_color\",\n        type: \"color\",\n        label: \"Primary Color\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"secondary_color\",\n        type: \"color\",\n        label: \"Secondary Color\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"accept_color\",\n        type: \"color\",\n        label: \"Accept (success) Color\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"error_color\",\n        type: \"color\",\n        label: \"Error Color\",\n        error: false,\n        background: null\n    },\n    {\n        name: \"id\",\n        type: \"text\",\n        label: \"Internal ID (autogenerated)\",\n        error: false,\n        background: null\n    },\n]\nconst steps = {\n    LOGO: \"logo\",\n    SCREEN_IMAGE: \"screenImage\",\n    SCREEN_WIDE_IMAGE: \"screenWideImage\",\n    DATA: \"data\"\n}\nclass PartnerForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fields: FORM_FIELDS,\n            step: steps.LOGO,\n            data: {},\n            logoDataURL: null,\n            logoFile: null,\n            screenImageDataURL: null,\n            screenImageFile: null,\n            screenWideImageDataURL: null,\n            screenWideImageFile: null\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.logoFileDropped = this.logoFileDropped.bind(this);\n        this.screenImageFileDropped = this.screenImageFileDropped.bind(this);\n        this.screenWideImageFileDropped = this.screenWideImageFileDropped.bind(this);\n    }\n\n    hasErrors() {\n        console.log(\"Checking for errors... \" + JSON.stringify(this.state.fields, null, 2));\n        for (var field of this.state.fields) {\n            if (field.error) return true\n        }\n        return false\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        if (this.hasErrors()) {\n            alert(\"Not so fast! There are some errors, please check the data...\");\n            return;\n        }\n\n        var formData = new FormData(event.target);\n        var object = {};\n        formData.forEach((value, key) => {\n            if (value !== null && value !== \"\") {\n                object[key] = value;\n            }\n        });\n        var files = {\n            logo: this.state.logoFile,\n            screenImage: this.state.screenImageFile,\n            screenWideImage: this.state.screenWideImageFile\n        }\n\n        // Notify up state:\n        this.props.onSubmit(object, files);\n    }\n\n    logoFileDropped(files) {\n        var file = files[0];\n        var reader = new FileReader();\n        // it's onload event and you forgot (parameters)\n        reader.onload = (e) => {\n            var currentStep = this.state.step;\n            this.setState({\n                logoDataURL: e.target.result,\n                logoFile: file,\n                step: currentStep === steps.LOGO ? steps.SCREEN_IMAGE : currentStep\n            });\n        };\n        // you have to declare the file loading\n        reader.readAsDataURL(file);\n    }\n\n    screenImageFileDropped(files) {\n        var file = files[0];\n        var reader = new FileReader();\n        // it's onload event and you forgot (parameters)\n        reader.onload = (e) => {\n            var currentStep = this.state.step;\n            this.setState({\n                screenImageDataURL: e.target.result,\n                screenImageFile: file,\n                step: currentStep === steps.SCREEN_IMAGE ? steps.SCREEN_WIDE_IMAGE : currentStep\n            });\n        };\n        // you have to declare the file loading\n        reader.readAsDataURL(file);\n    }\n\n    screenWideImageFileDropped(files) {\n        var file = files[0];\n        var reader = new FileReader();\n        // it's onload event and you forgot (parameters)\n        reader.onload = (e) => {\n            var currentStep = this.state.step;\n            this.setState({\n                screenWideImageDataURL: e.target.result,\n                screenWideImageFile: file,\n                step: currentStep === steps.SCREEN_WIDE_IMAGE ? steps.DATA : currentStep\n            });\n        };\n        // you have to declare the file loading\n        reader.readAsDataURL(file);\n    }\n\n    onDropInvalidFile() {\n        alert(\"Now slow down! This doesn't seem to be a valid image. We only accept PNGs...\");\n    }\n\n    fieldChangeCallback(field) {\n        if (field.type === \"color\") return (event) => {\n            var value = correctColorString(event.target.value);\n            var isValid = isValidColorString(value);\n            this.setFieldBackgroundColor(field, isValid ? value : null, () => {\n                this.setFieldErrorState(field, !isValid && value !== \"\", () => {\n                    this.setState({\n                        data: Object.assign({}, this.state.data, {\n                            [field.name]: value\n                        })\n                    })\n                });\n            });\n        };\n        else if (field.name === \"name\") return (event) => {\n            // The name field has some side effects:\n            // - Autogenerate the unlock code\n            // - Autogenerate the internal ID\n            var value = event.target.value\n            if (value !== \"\") {\n                var strippedValue = lowerCaseAndRemoveSpaces(value)\n                this.setState({\n                    data: Object.assign({}, this.state.data, {\n                        id: strippedValue,\n                        code: strippedValue + random4()\n                    })\n                })\n            }\n        };\n        else return (event) => { };\n\n        function correctColorString(colorString) {\n            if (colorString.startsWith(\"#\") && colorString.length === 7) return colorString; // Color starting with #\n            else if (!colorString.startsWith(\"#\") && colorString.length === 6) return \"#\" + colorString; // Color without #\n            else return colorString // Not a valid color\n        }\n\n        function isValidColorString(colorString) {\n            return /^#[0-9A-F]{6}$/i.test(colorString)\n        }\n\n        function random4() {\n            return Math.floor((Math.random() * 8999) + 1000);\n        }\n        function lowerCaseAndRemoveSpaces(str) {\n            return str\n                .replace(/\\s+/g, '')\n                .toLowerCase();\n        }\n    }\n\n    setFieldBackgroundColor(field, backgroundColor, callback) {\n        console.log(\"Setting \" + field.name + \" background color to \" + backgroundColor);\n        this.setState({\n            fields: this.state.fields.map((f) => {\n                if (f.name === field.name) {\n                    return Object.assign({}, f, { background: backgroundColor });\n                } else return f;\n            })\n        }, callback)\n    }\n    setFieldErrorState(field, isError, callback) {\n        this.setState({\n            fields: this.state.fields.map((f) => {\n                if (f.name === field.name) {\n                    return Object.assign({}, f, { error: isError });\n                } else return f;\n            })\n        }, callback)\n    }\n\n    render() {\n        var logoPicker = <Dropzone\n            key=\"logoPicker\"\n            accept={['image/png']}\n            multiple={false}\n            onDropAccepted={this.logoFileDropped}\n            onDropRejected={this.onDropInvalidFile}>\n            {({ getRootProps, getInputProps }) => (\n                <section>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        <p>\n                            Drop the partner LOGO here (or click to select file)\n                    {this.state.logoDataURL &&\n                                <img className=\"logo\"\n                                    src={this.state.logoDataURL} />}\n                        </p>\n                    </div>\n                </section>\n            )}\n        </Dropzone>;\n\n        var screenImagePicker = <Dropzone\n            key=\"screenImagePicker\"\n            accept={['image/png']}\n            multiple={false}\n            onDropAccepted={this.screenImageFileDropped}\n            onDropRejected={this.onDropInvalidFile}>\n            {({ getRootProps, getInputProps }) => (\n                <section>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        <p>\n                            Drop the NARROW SCREEN IMAGE here (or click to select file)\n                    {this.state.screenImageDataURL &&\n                                <img className=\"screen-image\"\n                                    src={this.state.screenImageDataURL} />}\n                        </p>\n                    </div>\n                </section>\n            )}\n        </Dropzone>;\n\n        var screenWideImagePicker = <Dropzone\n            key=\"screenWideImagePicker\"\n            accept={['image/png', 'image/jpeg']}\n            multiple={false}\n            onDropAccepted={this.screenWideImageFileDropped}\n            onDropRejected={this.onDropInvalidFile}>\n            {({ getRootProps, getInputProps }) => (\n                <section>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        <p>\n                            Drop the WIDE SCREEN IMAGE here (or click to select file)\n                    {this.state.screenWideImageDataURL &&\n                                <img className=\"screen-image\"\n                                    src={this.state.screenWideImageDataURL} />}\n                        </p>\n                    </div>\n                </section>\n            )}\n        </Dropzone>;\n\n        var dataFields = this.state.fields.map((field, index) => {\n            console.log(\"Background: \" + field.background);\n            var style = {\n                backgroundColor: field.background\n            };\n            if (field.error) {\n                style[\"borderBottom\"] = \"thick solid #FF0000\";\n            }\n            return <React.Fragment\n                key={field.name}>\n                <label>{field.label}\n                    <input\n                        name={field.name}\n                        type=\"text\"\n                        value={this.state.data[field.name]}\n                        onChange={this.fieldChangeCallback(field)}\n                        style={style}\n                    />\n                </label>\n            </React.Fragment>\n        });\n\n        var submitButton = <button type=\"submit\">Submit demo!</button>;\n\n        var completeView = [logoPicker, screenImagePicker, screenWideImagePicker, dataFields, submitButton];\n        return (\n            <form onSubmit={this.handleSubmit}>\n                {(() => {\n                    switch (this.state.step) {\n                        case steps.LOGO: return completeView.slice(0, 1);\n                        case steps.SCREEN_IMAGE: return completeView.slice(0, 2);\n                        case steps.SCREEN_WIDE_IMAGE: return completeView.slice(0, 3);\n                        case steps.DATA: return completeView;\n                    }\n                })()}\n            </form>\n        );\n    }\n}\nexport default PartnerForm;","class Utils {\n    readFileAsBas64String(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => {\n              let encoded = reader.result.toString().replace(/^data:(.*,)?/, '');\n              if ((encoded.length % 4) > 0) {\n                encoded += '='.repeat(4 - (encoded.length % 4));\n              }\n              resolve(encoded);\n            };\n            reader.onerror = error => reject(error);\n          });\n    }\n}\n\nexport default Utils;","class GitHubController {\n    constructor(owner, repo, github) {\n        this.owner = owner;\n        this.repo = repo;\n        this.github = github;\n    }\n\n    async createImageFileTrees(files, fromBranchName) {\n        return this.github.git.getRef({\n            owner: this.owner,\n            repo: this.repo,\n            ref: \"heads/\"+fromBranchName\n        }).then(async (ref) => {\n            var masterSha = ref.data.object.sha;\n            var treeObjects = []\n            for (const file of files) {\n                // First, we create the blob (translation: creating a blog means uploading the file):\n                var blob = await this.github.git.createBlob({\n                    owner: this.owner,\n                    repo: this.repo,\n                    content: file.content,\n                    encoding: \"base64\"\n                });\n\n                // Then, we map each blob to a tree request object:\n                treeObjects.push({\n                    path: file.path,\n                    sha: blob.data.sha,\n                    mode: \"100644\",\n                    type: \"blob\"\n                });\n            };\n\n            // And finally, create a tree with all the blobs we just created:\n            return this.github.git.createTree({\n                owner: this.owner,\n                repo: this.repo,\n                base_tree: masterSha,\n                tree: treeObjects\n            }).then((tree) => {\n                // Map the response to a \"tree result\" object that can be used in GitHubController.commitBranchFromTree(..):\n                return {\n                    parentSha: masterSha,\n                    treeSha: tree.data.sha\n                }\n            });\n        });\n    }\n\n    createJsonFileTree(jsonFile, baseTree) {\n        return this.github.git.createTree({\n            owner: this.owner,\n            repo: this.repo,\n            base_tree: baseTree.sha,\n            tree: [{\n                path: jsonFile.path,\n                content: jsonFile.content,\n                mode: \"100644\",\n                type: \"blob\"\n            }]\n        }).then((tree) => {\n            // Map the response to a \"tree result\" object that can be used in GitHubController.commitBranchFromTree(..):\n            return {\n                parentSha: baseTree.sha,\n                treeSha: tree.data.sha\n            }\n        });;\n    }\n\n    async commitFromTree(treeResult, commitMessage) {\n        console.log(\"commitBranchFromTree: \" + JSON.stringify(treeResult, null, 2));\n        return this.github.git.createCommit({\n            owner: this.owner,\n            repo: this.repo,\n            message: commitMessage,\n            tree: treeResult.treeSha,\n            parents: [treeResult.parentSha]\n        }).then((result) => {\n            return {\n                sha: result.data.sha\n            };\n            \n        });\n    }\n\n    async branchFromCommit(commitResult, branchName) {\n        return this.github.git.createRef({\n            owner: this.owner,\n            repo: this.repo,\n            ref: \"refs/heads/\" + branchName,\n            sha: commitResult.sha\n        });\n    }\n\n    async pullRequestFromBranch(branchName, title, body) {\n        return this.github.pulls.create({\n            owner: this.owner,\n            repo: this.repo,\n            title: title,\n            body: body,\n            head: branchName,\n            base: \"master\"\n        });\n    }\n}\n\nexport default GitHubController;","import React, { Component } from 'react';\nimport PartnerForm from './PartnerForm.js';\nimport Utils from './Utils.js';\nimport GitHubController from './GitHubController.js';\n\nconst JSON_URL = \"https://raw.githubusercontent.com/mozioinc/sdk_demos/master/demos.json\";\nclass PartnerPage extends Component {\n    constructor(props) {\n        super(props);\n        this.gitHubController = new GitHubController(\"mozioinc\", \"sdk_demos\", this.props.github);\n        this.utils = new Utils();\n        this.state = {\n            partners: [],\n            loading: false\n        };\n\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    async getJsonPartners() {\n        var response = await fetch(JSON_URL);\n        var stringResponse = await response.text();\n        console.log(response);\n        return JSON.parse(atob(stringResponse))\n    }\n\n    componentDidMount() {\n        this.getJsonPartners()\n            .then(data => {\n                console.log(data)\n                this.setState({\n                    partners: data\n                })\n            });\n    }\n\n    onSubmit(data, files) {\n        if (!this.validateOrAbort(data)) { return; }\n\n        window.scrollTo(0, 0);\n        this.setState({\n            loading: true\n        });\n\n        // var repo = github.getRepo(\"mozioinc\", \"sdk_demos\");\n        var branchName = \"demo-\" + data.id;\n        var logoImageName = \"logo_\" + data.id + \".png\";\n        var screenImageName = data.id + \"_narrow.png\";\n        var screenWideImageName = data.id + \"_wide.png\";\n\n        var promise = new Promise(async (resolve, reject) => {\n            resolve([\n                {\n                    path: \"images/\" + logoImageName,\n                    content: await this.utils.readFileAsBas64String(files.logo),\n                }, {\n                    path: \"images/\" + screenImageName,\n                    content: await this.utils.readFileAsBas64String(files.screenImage),\n                }, {\n                    path: \"images/\" + screenWideImageName,\n                    content: await this.utils.readFileAsBas64String(files.screenWideImage)\n                }\n            ]);\n        })\n            .then((files) => {\n                return this.gitHubController.createImageFileTrees(files, \"master\");\n            })\n            .then((treeResult) => {\n                return this.gitHubController.commitFromTree(treeResult, \"Add image files\");\n            })\n            .then((commitResult) => {\n                var branchPlaceholder = \"{branch_name}\";\n                data.logo_url = \"https://raw.githubusercontent.com/mozioinc/sdk_demos/\" + branchPlaceholder + \"/images/\" + logoImageName;\n                data.screen_image_url = \"https://raw.githubusercontent.com/mozioinc/sdk_demos/\" + branchPlaceholder + \"/images/\" + screenImageName;\n                data.screen_wide_image_url = \"https://raw.githubusercontent.com/mozioinc/sdk_demos/\" + branchPlaceholder + \"/images/\" + screenWideImageName;\n                var changed = false\n                var newArray = this.state.partners.map(function (partner) {\n                    if (partner.id === data.id) {\n                        // Found a partner with the same ID. Updating it:\n                        changed = true\n                        return data\n                    } else return partner;\n                });\n                if (!changed) {\n                    // No partner with the same ID, so simply add it:\n                    newArray.push(data)\n                }\n                // We create the JSON string and then encode it to base64 (_very_ rudimentary obfuscation)\n                var fileContents = btoa(JSON.stringify(newArray))\n                var jsonFile = {\n                    content: fileContents,\n                    path: \"demos.json\"\n                }\n                return this.gitHubController.createJsonFileTree(jsonFile, commitResult);\n            })\n            .then((result) => {\n                return this.gitHubController.commitFromTree(result, \"Add JSON file\");\n            })\n            .then((commitResult) => {\n                return this.gitHubController.branchFromCommit(commitResult, branchName);\n            })\n            .then(() => {\n                var prTitle = data.name;\n                var prBody = \"Adds all necessary files for the \" + data.name + \" demo: \\n\" +\n                    \"```\\n\" + JSON.stringify(data, null, 2) + \"\\n```\";\n                return this.gitHubController.pullRequestFromBranch(branchName, prTitle, prBody);\n            })\n            .then((response) => {\n                alert(\"Success! \" + response);\n                this.setState({\n                    loading: false\n                });\n            }, (error) => {\n                alert(\"Error... \" + error);\n                this.setState({\n                    loading: false\n                });\n            })\n\n        // 1. Create the new branch:\n        // repo.createBranch(\"master\", branchName)\n        //     .then(async () => {\n        //         // 2. Write the logo image\n        //         const base64FileString = await this.utils.readFileAsBas64String(files.logo);\n        //         await repo.writeFile(branchName, \"images/\"+logoImageName, base64FileString, \"Add \" + data.name + \" demo logo\", {\n        //             encode: false // We shouldn't encode the file to base64 - it's already base64 from utils above\n        //         });\n        //         return repo;\n        //     })\n        //     .then(async (repo) => {\n        //         // 3. Write the screen image\n        //         const base64FileString = await this.utils.readFileAsBas64String(files.screenImage);\n        //         await repo.writeFile(branchName, \"images/\"+screenImageName, base64FileString, \"Add \" + data.name + \" demo screen image\", {\n        //             encode: false // We shouldn't encode the file to base64 - it's already base64 from utils above\n        //         });\n        //         return repo;\n        //     })\n        //     .then(async (repo) => {\n        //         // 4. Write the wide screen image\n        //         const base64FileString = await this.utils.readFileAsBas64String(files.screenWideImage);\n        //         await repo.writeFile(branchName, \"images/\"+screenWideImageName, base64FileString, \"Add \" + data.name + \" demo screen wide image\", {\n        //             encode: false // We shouldn't encode the file to base64 - it's already base64 from utils above\n        //         });\n        //         return repo;\n        //     })\n        //     .then(async (repo) => {\n        //         // 5. Write the JSON file:\n        //         var branchPlaceholder = \"{branch_name}\";\n        //         data.logo_url = \"https://raw.githubusercontent.com/mozioinc/sdk_demos/\"+branchPlaceholder+\"/images/\"+logoImageName;\n        //         data.screen_image_url = \"https://raw.githubusercontent.com/mozioinc/sdk_demos/\"+branchPlaceholder+\"/images/\"+screenImageName;\n        //         data.screen_wide_image_url = \"https://raw.githubusercontent.com/mozioinc/sdk_demos/\"+branchPlaceholder+\"/images/\"+screenWideImageName;\n        //         var changed = false\n        //         var newArray = this.state.partners.map(function (partner) {\n        //             if (partner.id === data.id) {\n        //                 // Found a partner with the same ID. Updating it:\n        //                 changed = true\n        //                 return data\n        //             } else return partner;\n        //         });\n        //         if (!changed) {\n        //             // No partner with the same ID, so simply add it:\n        //             newArray.push(data)\n        //         }\n        //         // We create the JSON string and then encode it to base64 (_very_ rudimentary obfuscation)\n        //         var fileContents = btoa(JSON.stringify(newArray))\n        //         await repo.writeFile(branchName, \"demos.json\", fileContents, \"Add \" + data.name + \" to demos JSON\", {\n        //             encode: true // The JSON has been base64 encoded above, but we do it again because we want it to stay encoded in the repo\n        //         })\n        //         return repo;\n        //     })\n        //     .then((repo) => {\n        //         // 6. Create the PR into master:\n        //         return repo.createPullRequest({\n        //             title: data.name,\n        //             head: branchName,\n        //             base: \"master\",\n        //             body: \"Adds all necessary files for the \" + data.name + \" demo: \\n\" +\n        //                 \"```\\n\" + JSON.stringify(data, null, 2) + \"\\n```\"\n        //         });\n        //     })\n        //     .then((result) => {\n        //         alert(\"Success!\");\n        //         this.setState({\n        //             loading: false\n        //         });\n        //     }, (err) => {\n        //         alert(\"Error... \" + err);\n        //         this.setState({\n        //             loading: false\n        //         });\n\n        //         // Something went wrong - so we clean up by removing the branch:\n        //         return repo.deleteRef(\"heads/\"+branchName).then(() => {}, (err) => {\n        //             alert(\"Could not delete the branch. It probably failed before a new branch was created: \" + err);\n        //         });\n        //     });\n    }\n\n    validateOrAbort(data) {\n        if (!data.id || data.id === \"\") {\n            alert(\"Please fill in the ID!\");\n            return false;\n        }\n        if (!data.tint_color || data.tint_color === \"\") {\n            alert(\"Please fill in the tint color!\");\n            return false;\n        }\n        if (!data.contrast_tint_color || data.contrast_tint_color === \"\") {\n            alert(\"Please fill in the contrast tint color!\");\n            return false;\n        }\n        if (!data.primary_color || data.primary_color === \"\") {\n            alert(\"Please fill in the primary color!\");\n            return false;\n        }\n        return true;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ul className=\"column\">\n                    {this.state.partners.map(partner =>\n                        <li key={partner.id}>\n                            <p>{partner.name}</p>\n                            <img className=\"partner-logo\" src={partner.logo_url} alt={partner.name} />\n                        </li>\n                    )}\n                </ul>\n                {this.state.loading || <div className=\"column form\">\n                    <PartnerForm\n                        onSubmit={this.onSubmit}\n                    />\n                </div>}\n                {this.state.loading && <p>Saving...</p>}\n            </React.Fragment>\n        );\n    }\n}\nexport default PartnerPage;","import React, { Component } from 'react';\nimport GitHub from 'github-api';\nimport Octokit from '@octokit/rest';\n\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        var formData = new FormData(event.target);\n        var dataObj = {};\n        formData.forEach((value, key) => { dataObj[key] = value });\n\n        var github = new Octokit({\n            // username: dataObj.username,\n            auth: dataObj.access_token,\n            userAgent: 'SDK Partnerator',\n        });\n        this.props.onLogin(github);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                {/* <label>Github username\n                    <input\n                        name=\"username\"\n                        type=\"text\"\n                    />\n                </label> */}\n                <label>Github access token\n                    <input\n                        name=\"access_token\"\n                        type=\"password\"\n                    />\n                </label>\n                <p>Create one here: <a\n                    href=\"https://github.com/settings/tokens\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                > https://github.com/settings/tokens </a></p>\n                <p>ONLY give access to <b>public_repo</b></p>\n                <button type=\"submit\">Proceed</button>\n            </form>\n        );\n    }\n}\nexport default LoginPage;","import React, { Component } from 'react';\nimport PartnerPage from './PartnerPage.js';\nimport LoginPage from './LoginPage.js';\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            github: null\n        };\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n\n    handleLogin(github) {\n        this.setState({ github: github });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.state.github != null || <LoginPage\n                    onLogin={this.handleLogin}\n                />}\n                {this.state.github && <PartnerPage\n                    github={this.state.github}\n                />}\n            </React.Fragment>\n        );\n    }\n}\nexport default MainPage;","import React from 'react';\nimport MainPage from './MainPage.js';\n\nfunction App() {\n  return (\n    <div>\n      <h1>SDK Partnerator 3000</h1>\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}